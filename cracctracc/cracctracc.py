import importlib.metadata
import os
import click
import logging

# Submodules
from modules import gpx_parser as gpx
from modules import visualiser as vis

__version__ = importlib.metadata.version("cracctracc")

# Setup click
@click.command()
@click.argument("gpx_track_file", type=click.File("r"))  # Add arg for ingress GPX track file
@click.option("--debug", "-d", help="Turn debug logging on", is_flag=True, default=False)  # Debug option switch
@click.option("--output-csv", "-o", help="Save CSV ouptut")  # CSV output
def main(gpx_track_file, debug, output_csv):
    """CraccTracc is a sailing VMG analysis tool that uses the GPX track generated by GNSS enabled smartwatches to generate VMG plots for manual analysis.

    GPX_TRACK_FILE is the path to the input GPX track file
    """
    # Setup logging
    log = logging.getLogger(__name__)
    console_handler = logging.StreamHandler()
    if debug:
        log.setLevel(logging.DEBUG)
        console_handler.setLevel(logging.DEBUG)
        formatter = logging.Formatter(fmt="<%(levelname).4s> %(module)s>>%(funcName)s() :: %(message)s")
    else:
        log.setLevel(logging.INFO)
        console_handler.setLevel(logging.INFO)
        formatter = logging.Formatter(fmt="%(message)s")
    console_handler.setFormatter(formatter)
    log.addHandler(console_handler)

    log.info("CraccTracc %s\n" % __version__)
    log.debug("Debug enabled")

    # set the source file to analyse
    source = gpx_track_file.name
    source_base, source_ext = os.path.splitext(source)
    log.debug("Using %s as input data" % source)

    # save df from GPX data
    df = gpx.create_df(log, source)

    # uncomment to save/load df to pickle to load faster next time
    # 211118 (JLF) Deprecating this for later optimisation
    # df.to_pickle("%s.pkl" % source_base)
    # df.to_csv("%s.csv" % source_base)
    # df = pd.read_pickle('data/activity_3427215863.pkl')

    # add speed and plot
    df = gpx.add_speed(log, df)

    # Save metrics for external analysis
    # df.to_pickle("%s-metrics.pkl" % source_base)
    if output_csv:
        output_base, output_ext = os.path.splitext(output_csv)
        output_head, output_tail = os.path.split(output_base)
        # df.to_csv("%s/%s-metrics.csv" % output_head, output_tail)
        df.to_csv("%s-metrics.csv" % output_base)

    vis.plot(log, df)
